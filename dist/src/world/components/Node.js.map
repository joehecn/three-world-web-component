{"version":3,"file":"Node.js","sourceRoot":"","sources":["../../../../src/world/components/Node.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,eAAe,EACf,WAAW,EACX,SAAS,EACT,IAAI,EACJ,aAAa,EACb,oBAAoB,EACpB,cAAc,GACf,MAAM,OAAO,CAAC;AAEf,MAAM,OAAO,IAAK,SAAQ,eAAe;IAGvC;QACE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;IAClC,CAAC;IAEO,YAAY;QAClB,oBAAoB;QACpB,MAAM,QAAQ,GAAG,IAAI,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAE7C,MAAM,WAAW,GAAG,IAAI,cAAc,EAAE,CAAC;QAEzC,WAAW,CAAC,MAAM,GAAG,GAAG,EAAE;YACxB,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC;QAEF,2BAA2B;QAC3B,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;QAE9C,4CAA4C;QAC5C,MAAM,QAAQ,GAAG,IAAI,oBAAoB,CAAC;YACxC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC;SACvD,CAAC,CAAC;QAEH,qDAAqD;QACrD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAQ,CAAC;QAEjD,MAAM,gBAAgB,GAAG,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEhD,4CAA4C;QAC5C,IAAI,CAAC,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,gBAAgB,GAAG,KAAK,CAAC;YAC5C,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,gBAAgB,GAAG,KAAK,CAAC;YAC5C,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,gBAAgB,GAAG,KAAK,CAAC;QAC9C,CAAC,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import {\n  EventDispatcher,\n  BoxGeometry,\n  MathUtils,\n  Mesh,\n  TextureLoader,\n  MeshStandardMaterial,\n  LoadingManager,\n} from 'three';\n\nexport class Node extends EventDispatcher {\n  public mesh: Mesh;\n\n  constructor() {\n    super();\n\n    this.mesh = this.__createMesh();\n  }\n\n  private __createMesh() {\n    // create a geometry\n    const geometry = new BoxGeometry(20, 20, 20);\n\n    const loadManager = new LoadingManager();\n\n    loadManager.onLoad = () => {\n      this.dispatchEvent({ type: 'load-ok' });\n    };\n\n    // create a texture loader.\n    const loader = new TextureLoader(loadManager);\n\n    // the texture we just loaded as a color map\n    const material = new MeshStandardMaterial({\n      map: loader.load('/assets/tw/textures/uv-test-bw.png'),\n    });\n\n    // create a Mesh containing the geometry and material\n    const mesh = new Mesh(geometry, material) as any;\n\n    const radiansPerSecond = MathUtils.degToRad(30);\n\n    // this method will be called once per frame\n    mesh.tick = (delta: number) => {\n      mesh.rotation.z += radiansPerSecond * delta;\n      mesh.rotation.x += radiansPerSecond * delta;\n      mesh.rotation.y += radiansPerSecond * delta;\n    };\n\n    return mesh;\n  }\n}\n"]}